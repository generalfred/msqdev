#!/usr/bin/perl
use warnings;
use strict;

#
# Copyright (C) 2011 Jeremiah Mahler <jmmahler@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

use Text::LookUpTable;
use Time::HiRes qw(usleep);
use IO::Select;
use MSQ::RTData;

# {{{ @ARGV

# first define the default values, then
# process @ARGV for any changes

my @modes = qw(single);
my $mode_str = join ", ", @modes;
my $mode_reset = 1;   # used to clear default modes if any modes are defined

my $name = '';

# default values
my $rtdata_file = "rtdata"; # real time data file

my $change_type = 'shift';

my $range = 5;   			# maximum range (%) to vary the values by
my $num_points = 4;   		# number of points to randomize

#my $table_file = 'advanceTable1';
my $table_file = 'veTable1';

my $table_type = $table_file;  # currently same as file, but this may change
my $SEP = ",";

my $pname = (split /\//, $0)[-1];  # name of this program without spaces


my $DEBUG = 0;

# usage
# TODO - output file description
my $usage = <<"HERE";
  USAGE:

	$pname [<options>]

	  plot data is output to plotdata-<table name>-<time stamp>

  OPTIONS:      [default value]  description

    -m          [$mode_str] mode
                Add a mode to the list of modes which are used
                as names during a tuning session.
                For example road testing where driving is performed back and forth
                on a single stretch of road might have modes: "back", "forth".

    -n          [$name] a name for this session

    -t          [$table_file] type
                veTable1 | advanceTable1

    -rd         [$rtdata_file] real time data file

    -ct         [$change_type] which mode to use when changing points
                random | shift

    -r          [$range] maximum range (%) to vary values

    -d          [$DEBUG] enable debugging (1) or disable (0)

    -h          this screen

  RUNNING COMMANDS:

   ENTER        pause/resume recording
   Ctrl-C       quit

  EXAMPLES:

   # to record all the debug output use 'tee'
   $pname | tee tune.log

   # or with a time stamped file
   $pname -pr 1 | tee tuner_log-`date +%Y%m%d.%H:%M:%S` 

HERE

# process @ARGV
{
my $s1;
my $s2;
my $i;

# utility for checking a required second argument
my $req_arg_fn = sub {
	my $op = shift;

	if (($i + 1) >= @ARGV) {
		print STDERR "option '$op' requires an argument. See help ($pname -h)\n";
		#print STDERR $usage;
		exit 1;
	}

	$i++;  # skip the second argument during the next iteration

	return $ARGV[$i];  # return the second argument
};

for ($i = 0; $i < @ARGV; $i++) {
	$s1 = $ARGV[$i];

    if ($s1 eq '-h') {
		print $usage;
		exit;
	} elsif ($s1 eq '-m') {
        my $new_mode = $req_arg_fn->('-m');
        if ($mode_reset) {
            $mode_reset = 0;
            @modes = ($new_mode);
        } else {
            push @modes, $new_mode;
        }
	} elsif ($s1 eq '-n') {
        $name = $req_arg_fn->('-n');
	} elsif ($s1 eq '-t') {
        $table_file = $req_arg_fn->('-t');
        unless ($table_file eq 'veTable1' or $table_file eq 'advanceTable1') {
		   print STDERR "unkown table type (-t) '$table_file', See help ($pname -h)\n";
		   exit 1;
        }
    } elsif ($s1 eq '-rd') {
        $rtdata_file = $req_arg_fn->('-rd');
    } elsif ($s1 eq '-ct') {
        $change_type = $req_arg_fn->('-ct');
        unless ($change_type eq 'random' or $change_type eq 'shift') {
		   print STDERR "unkown change type (-ct) '$change_type', See help ($pname -h)\n";
		   exit 1;
        }
    } elsif ($s1 eq '-r') {
        $range = $req_arg_fn->('-r');
    } elsif ($s1 eq '-d') {
        $DEBUG = $req_arg_fn->('-d');
    } else {
		print STDERR "unkown option '$s1'. See help ($pname -h)\n";
		exit 1;
    }
}
$mode_str = join ", ", @modes;
}


# The range is given as a percent(%) but in all the calculations
# it is used as a fraction.
# Here it is converted to a fraction to make the calculations simpler.
$range = $range / 100;

$name .= "-" if ($name ne '');
# }}}

my $table = Text::LookUpTable->load_file($table_file)
	or die "unable to open table in file '$table_file': $!\n";
my $orig_table = $table->copy();

my $rtdata = MSQ::RTData->new($rtdata_file)
	or die "unable to open file '$rtdata_file': $!\n";

my $mode_n = 0;       # current position in @modes
my $mode = $modes[0]; # current mode
my $out_file;
my $out_points_file;

# global bool used to configured the direction
# used by shift_points()
my $shift_up_else_down = 1;

# {{{ signal handlers

# Ctrl-C
$SIG{INT} = sub {
	print "restoring original table\n" if $DEBUG;
	$orig_table->save_file();
	`kill -HUP \`cat pid\``;

	exit 0;
};

# }}}

# {{{ configure the type
# names of x, y, and z
my $sx;
my $sy;
my $sv;

if ($table_type eq 'advanceTable1') {
	print "type: advanceTable1\n" if $DEBUG;
	$sx = "rpm";
	$sy = "map";
	$sv = "advance";
} elsif ($table_type eq 'veTable1') {
	print "type: veTable1\n" if $DEBUG;
	$sx = "rpm";
	$sy = "fuelload";
	$sv = "veCurr1";
} else {
	print STDERR "unkown table type '$table_type'\n";
	exit 1;
}
# }}}

my @points;  # unique table points from last recording

# history of recorded data, (initialize)
my %hist;
for (my $i = 0; $i < @modes; $i++) {
	$hist{$modes[$i]} = [];
}

# {{{ functions

# {{{ main_menu()

=head2 main_menu()

Establishes the main interface.

=cut

sub main_menu() {

	while (1) {
		$mode = $modes[$mode_n];

		print "mode: $mode\n";
		print "change type: $change_type\n";
		print "Press ENTER to begin recording.\n";
		<STDIN>;

		record_menu();
		print "recording stopped\n";
		# new data has been recorded and stored in @hist

		my $rtdata_hist = $hist{$mode};

		# Decide which (best) should be modified (randomized).
		my $next_points;
		if (@$rtdata_hist >= 2) {
			my $cmp = best_max_rpm($rtdata_hist->[0]{rtdata},
								$rtdata_hist->[1]{rtdata});
			if (1 == $cmp) {
				print "best: new is better than previous\n";
				$next_points = twdac($rtdata_hist->[0]{points});
				#$shift_up_else_down = $shift_up_else_down;  # current direction OK
			} elsif (-1 == $cmp) {
				print "best: previous is better than new\n";
				$next_points = twdac($rtdata_hist->[1]{points});
				$shift_up_else_down = ! $shift_up_else_down;  # change direction
			} else {
				print "best: equal, reverting to previous\n";
				$next_points = twdac($rtdata_hist->[1]{points});
				#$shift_up_else_down = $shift_up_else_down;  # direction OK
			}
		} else {
			print "best: not enough points yet, need at least 2\n";
			$next_points = twdac($rtdata_hist->[0]{points});
		}

		@points = ();
		@points = @$next_points;

		if ($change_type eq 'random') {
			print "change: randomizing points ...";
			randomize_points($num_points, $range, \@points);  # *mutates @points
		} elsif ($change_type eq 'shift') {
			print "change: shifting points ...";
        	shift_points($range, \@points);
		} else {
			print STDERR "unkown change type '$change_type'\n";
			exit 1;
		}

        foreach my $point (@points) {
            $table->set($point->[0], $point->[1], $point->[2]);
        }

	    $table->save_file();
	    `kill -HUP \`cat pid\``;
		print "done\n";

		$mode_n++;
		$mode_n = 0 if ($mode_n >= @modes);
	}
}
# }}}

# {{{ record_menu()

=head2 record_menu()

Establishes the interface for recording points.

Stores the newly recorded points in @points.
Each point is stored with three values: [x, y, value].

Stores the points to a file in the current directory
named: msq-accel-<name><timestamp>-points-<mode>

Stores the data a file in the current directory
named: msq-accel-<name><timestamp>-rtdata-<mode>

global variables: $rtdata

=cut

sub record_menu() {
	my $timestamp = timestamp();
	$out_file = "msq-accel-$name$timestamp-rtdata-$mode";
	$out_points_file = "msq-accel-$name$timestamp-points-$mode";
	# update documentation if these name templates are changed

	print "outputting data to '$out_file'\n" if $DEBUG;
	print "outputting points to '$out_points_file'\n" if $DEBUG;

	my $out_points = MSQ::RTData->new($out_points_file, ["x", "y", $sv]);

	my $rtdata_out = MSQ::RTData->new($out_file, [$rtdata->columns]);

	my %points;  # used to create unique set of points

	my $sel_stdin = IO::Select->new();
	$sel_stdin->add(\*STDIN);

	print "Press ENTER to stop recording.\n";
	$rtdata->seek_end();  # skip first (old data)
	while (1) {

		# if user wants to stop ...
		if ($sel_stdin->can_read(0)) {
			<STDIN>;  # read and discard
			$sel_stdin->remove(\*STDIN);
			last;
		}

		my %cols = $rtdata->columns_hr();
		my $px = $cols{$sx};
		my $py = $cols{$sy};

		while (my $vals = $rtdata->getline()) {
			# get the values at their positions
			my $x_val = $vals->[$cols{$sx}];
			my $y_val = $vals->[$cols{$sy}];

			# lookup the value at the current point
			my $cur_point = ($table->lookup_points($x_val, $y_val, 0))[0];
			my $cur_val = $table->get($cur_point->[0], $cur_point->[1]);
			my $point_uid = join ", ", @$cur_point;  # unique identifier

			$points{$point_uid} = [@$cur_point, $cur_val];

			$rtdata_out->print($vals);
		}

		usleep(2e4);  # slow things down
	}

	@points = ();  # clear old points
	foreach my $key (keys %points) {
		push @points, $points{$key};
	}

	@points = sort {
					if ($a->[0] == $b->[0]) {
						($a->[1] <=> $b->[1]);
					} else {
						($a->[0] <=> $b->[0]);
					}
				} @points;

	# save the points to a file
	foreach my $point (@points) {
		$out_points->print($point);
	}

	# newest point at offset 0
	unshift @{$hist{$mode}}, { rtdata => $rtdata_out,
				  		 	   points => \@points }
}
# }}}

# {{{ randomize_points

=head2 randomize_points()

randomize_points($num, $pcnt_range, \@points);

$num is the number of randomly chosen points to be changed.

$pcnt_change is the maximum percent change in a point will be changed.

\@points is the list of points to change.

=cut

sub randomize_points {
    my ($n, $r, $points) = @_;

    my $num_points = @$points;
	return if (0 == $num_points);

    for (my $i = 0; $i < $n; $i++) {
        my $j = int(rand($num_points));  # offset of point to change

		my $x = $points->[$j][2];  # value

        my $d = $x * $r;
        $d = rand(2*$d) - $d;

        $x += $d;

        $x = (int($x * 100)) / 100;  # round
        $points->[$j][2] = $x;
    }
}
# }}}

# {{{ shift_points

=head2 shift_points($change, \@points)

Shift all points up/down.

$change is the fraction (percent / 100) to change a point.

\@points is the list of points to change (mutate).

=cut

sub shift_points {
    my ($r, $points) = @_;

    my $num_points = @$points;
	return if (0 == $num_points);

	print "shift_points()\n" if ($DEBUG);

	# randomly up/down
	my $neg = $shift_up_else_down ? 1 : -1;
	print "  neg: $neg\n" if ($DEBUG);

    for (my $i = 0; $i < $num_points; $i++) {
		my $x = $points->[$i][2];  # value

		print "  x: $x\n" if ($DEBUG);
        my $d = $x * $r * $neg;
		print "  d: $d\n" if ($DEBUG);

        $x += $d;

        $x = (int($x * 100)) / 100;  # round
		print "  x (new): $x\n" if ($DEBUG);

        $points->[$i][2] = $x;
    }
}
# }}}

# {{{ timestamp
sub timestamp {
	my ($month, $day, $year, $hour, $min, $sec) = (localtime)[4, 3, 5, 2, 1, 0];
	$year += 1900;
	$month += 1;
	return sprintf("%d%02d%02d-%02d:%02d:%02d", $year, $month, $day, $hour, $min, $sec);
}
# }}}

# {{{ best_max_rpm

=head2 best_max_rpm

Determines which of the two real time data traces is best
(maximizes rpm).

Returns:  1 if first is better than second
          0 if equal
		 -1 if second is better than first
		  (just like <=> or cmp)

=cut

sub best_max_rpm {
	my $rtdata1 = shift;
	my $rtdata2 = shift;

	my %cols = $rtdata1->columns_hr;
	# assumes rtdata2 has the same columns

	# Assumes acceleration is increasing so that
	# rpm at end is larger then at the begining.
	$rtdata1->seek_start();
	$rtdata2->seek_start();
	my $min1 = $rtdata1->getline()->[$cols{rpm}];
	my $min2 = $rtdata2->getline()->[$cols{rpm}];

	$rtdata1->seek_last();
	$rtdata2->seek_last();
	my $max1 = $rtdata1->getline()->[$cols{rpm}];
	my $max2 = $rtdata2->getline()->[$cols{rpm}];

	print "range 1: $min1, $max1\n" if $DEBUG;
	print "range 2: $min2, $max2\n" if $DEBUG;

	# find a common (comparable) range of rpms
	my $min_rpm = ($min1 < $min2) ? $min2 : $min1;
	my $max_rpm = ($max1 > $max2) ? $max2 : $max1;

	print "min, max: $min_rpm, $max_rpm\n" if $DEBUG;

	# Over the same range of rpms,
	# the one with the short time interval is
	# the better solution.

	# find the starting and ending times.
	$rtdata1->seek_start();
	my ($ts1, $te1);
	while (my $vals = $rtdata1->getline()) {
		if ($vals->[$cols{rpm}] >= $min_rpm) {
			$ts1 = $vals->[$cols{localtime}];
			last;
		}
	}
	while (my $vals = $rtdata1->getline()) {
		if ($vals->[$cols{rpm}] >= $max_rpm) {
			last;
		}
		$te1 = $vals->[$cols{localtime}];
	}
	my $dt1;
	$dt1 = (defined $te1) ? ($te1 - $ts1) : 0;
	print "dt1: $dt1  (ts=$ts1)\n" if $DEBUG;

	return 0 if (0 == $dt1); # not enough data to compare, assume equal

	# do the same for rtdata2
	$rtdata2->seek_start();
	my ($ts2, $te2);
	while (my $vals = $rtdata2->getline()) {
		if ($vals->[$cols{rpm}] >= $min_rpm) {
			$ts2 = $vals->[$cols{localtime}];
			last;
		}
	}
	while (my $vals = $rtdata2->getline()) {
		if ($vals->[$cols{rpm}] >= $max_rpm) {
			last;
		}
		$te2 = $vals->[$cols{localtime}];
	}
	my $dt2;
	$dt2 = (defined $te2) ? ($te2 - $ts2) : 0;
	print "dt2: $dt2  (ts=$ts2)\n" if $DEBUG;
	return 0 if (0 == $dt2); # not enough data to compare, assume equal

	return ($dt2 <=> $dt1);
	# dt1 < dt2 -> 1, OK
}
# }}}

# {{{ twdac

=head2 twdac()

Two dimensional array copy.

=cut

sub twdac {
	my $ar = shift;

	my @new_ar = ();

	for (my $i = 0; $i < @$ar; $i++) {
		$new_ar[$i] = [@{$ar->[$i]}];
	}

	return \@new_ar;
}
# }}}

# }}}

main_menu();

print "restoring original table\n" if $DEBUG;
$orig_table->save_file();
`kill -HUP \`cat pid\``;


