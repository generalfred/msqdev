#!/usr/bin/perl
use strict;

#
# Copyright (C) 2011 Jeremiah Mahler <jmmahler@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

use Text::LookUpTable;

# {{{ process @ARGV, configure defaults
my $pname = (split /\//, $0)[-1];  # name of this program without spaces

my $afrTable1_file = "afrTable1";
my $veTable1_file = "veTable1";

# These constants where obtained from
#   RedTruck-msqdev/analyze/ve_tuner.R
#my $a = -1.549e-01;
my $a = -1.378e-01;
my $b = 0;
#my $c = 7.247e-03;
my $c = -7.011e-03;
#my $d = 7.868e-04;
my $d = 3.549e-04;
#my $e = 1.269e-02;
my $e = 5.96e-03;
#my $f = -3.460e-06;
my $f = -1.406e-06;
#my $g = 9.404e00;
my $g = 1.545e01;

my @avail_modes = qw(constant to_afrTable to_veTable1);
my $mode = 'constant';
my $afr = 13.5;
my $drpm = 10000;  # only allow changes below this rpm

my $usage = <<"HERE";
    USAGE:
       $pname [<options>] 

       $pname is used to modify the tables (veTable1, afrTable1) based
       on the linear function that predicts its behavior.

    OPTIONS:
        afr1 = a*veCurr1
                    + c*fuelload + d*fuelload^2
                    + e*rpm + f*rpm^2
                    + g
        coefficients
        -a                  [$a]
        -c                  [$c]
        -d                  [$d]
        -e                  [$e]
        -f                  [$f]
        -g                  [$g]

        -afrf               [$afrTable1_file] afr table file
        -vef                [$veTable1_file] ve table file

        -m <mode>           [$mode] set the mode (see below)

        -afr $afr           (-m constant) set a constant afr over entire veTable

        -m to_afrTable1     convert values in veTable1 to afrTable1 
        -m to_veTable1      convert values in afrTable1 to veTable1

        -drpm               [$drpm] only allow changes below this rpm

        -h                  help menu (this page)
HERE

{
my $s1;
my $s2;
my $i;

# {{{ $req_arg_fn - utility for checking a required second argument
my $req_arg_fn = sub {
	my $op = shift;

	if (($i + 1) >= @ARGV) {
		print STDERR "option '$op' requires an argument. See help ($pname -h)\n";
		exit 1;
	}

	$i++;  # skip the second argument during the next iteration

	return $ARGV[$i];  # return the second argument
};
# }}}

for ($i = 0; $i < @ARGV; $i++) {
	$s1 = $ARGV[$i];

    if ($s1 eq '-h') {
		print $usage;
		exit;
	} elsif ($s1 eq '-a') {
        $a = $req_arg_fn->('-a');
#	} elsif ($s1 eq '-b') {
#        $b = $req_arg_fn->('-b');
	} elsif ($s1 eq '-c') {
        $c = $req_arg_fn->('-c');
	} elsif ($s1 eq '-d') {
        $d = $req_arg_fn->('-d');
	} elsif ($s1 eq '-e') {
        $e = $req_arg_fn->('-e');
	} elsif ($s1 eq '-f') {
        $f = $req_arg_fn->('-f');
	} elsif ($s1 eq '-g') {
        $g = $req_arg_fn->('-g');
	} elsif ($s1 eq '-afrf') {
        $afrTable1_file = $req_arg_fn->('-afrf');
    } elsif ($s1 eq '-vef') {
        $veTable1_file = $req_arg_fn->('-vef');
	} elsif ($s1 eq '-m') {
        $mode = $req_arg_fn->('-m');
        unless (grep $mode, @avail_modes) {
            print STDERR "mode '$mode' not one of the available modes. See help ($pname -h)\n";
            exit 1;
        }
	} elsif ($s1 eq '-afr') {
        $afr = $req_arg_fn->('-afr');
	} elsif ($s1 eq '-drpm') {
        $drpm = $req_arg_fn->('-drpm');
    } else {
		print STDERR "unkown option '$s1'. See help ($pname -h)\n";
		exit 1;
    }
}
}

# }}}

# Calculate the ve value
sub calc_ve {
	my ($afr, $fuelload, $rpm) = @_;

	# afr function solved for ve
	my $ve = (1.0/$a)*($afr - ($c*$fuelload + $d*($fuelload ** 2)
				+ $e*$rpm + $f*($rpm ** 2)
				+ $g));

	return $ve;
}

if ($mode eq 'constant') {
    my $veTable1 = Text::LookUpTable->load_file($veTable1_file)
	    or die "Unable to load veTable1 from file '$veTable1_file': $!\n";

    my @xc = $veTable1->get_x_coords();
    my @yc = $veTable1->get_y_coords();
    my $num_x = @xc;
    my $num_y = @yc;

    for (my $x = 0; $x < $num_x; $x++) {
		my $rpm = $xc[$x];
		last if ($rpm >= $drpm);
        for (my $y = 0; $y < $num_y; $y++) {
            my $fuelload = $yc[$y];

            my $ve = calc_ve($afr, $fuelload, $rpm);

            # ve values are only integers
            $ve = int($ve);

            $ve = 0 if ($ve < 0);

            $veTable1->set($x, $y, $ve);
        }
    }

    $veTable1->save_file();
} elsif ($mode eq 'to_veTable1') {
    my $afrTable1 = Text::LookUpTable->load_file($afrTable1_file)
        or die "Unable to load afrTable1 from file '$afrTable1_file': $!\n";

    my $veTable1 = Text::LookUpTable->load_file($veTable1_file)
	    or die "Unable to load veTable1 from file '$veTable1_file': $!\n";

    my @xc = $veTable1->get_x_coords();
    my @yc = $veTable1->get_y_coords();
    my $num_x = @xc;
    my $num_y = @yc;

    for (my $x = 0; $x < $num_x; $x++) {
		my $rpm = $xc[$x];
		last if ($rpm >= $drpm);

        for (my $y = 0; $y < $num_y; $y++) {
            my $fuelload = $yc[$y];

            # find the nearest point
            my $point = ($afrTable1->lookup_points($rpm, $fuelload, 0))[0];

            # does not extrapolate values
            my $afr = $afrTable1->get($point->[0], $point->[1]);

            my $ve = calc_ve($afr, $fuelload, $rpm);

            # ve values are only integers
            $ve = int($ve);

            $ve = 0 if ($ve < 0);

            $veTable1->set($x, $y, $ve);
        }
    }

    $veTable1->save_file();


} else {
    # TODO - to_afrTable1

    print "mode '$mode' has not been implemented yet.\n";
    exit;

}

