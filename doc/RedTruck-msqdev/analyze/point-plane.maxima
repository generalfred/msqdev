
/*
 * Once two or more points are found a least squares
 * fit can be performed to find the function of a plane.
 * And once the function of a plane is known
 * it can be used to build an entire table
 * (see bin/planetable.pl in libtext-lookuptable-perl)
 */

/*
 * Enter all the points here.
 * z, x, y
 */
/* sample
x1: [1, 1, 2, 1.5];
y1: [1, 2, 2, 1.5];
z1: [3, 4, 5, 4.2];
*/
x1: [];
y1: [];
z1: [];

/*
 * veTable1
 *  rpm, fuelload, veCurr1
 */
/* 20110615 throttle stop */
x1: append(x1, 2870.51);  /* rpm */
y1: append(y1, 32.8);     /* fuelload */
z1: append(z1, 67);       /* veCurr1 */


/* advanceTable1
 *  rpm, map, advance
 */
/*
x1: append(x1, 1580.21);
y1: append(y1, ???);
z1: append(z1, 39.12);
*/


min_x1: apply(min, x1);
max_x1: apply(max, x1);
min_y1: apply(min, y1);
max_y1: apply(max, y1);

d1: transpose(addrow(matrix(), z1, x1, y1));

load(lsquares);

_fit1: lsquares_estimates(d1, [z, x, y], z = a*x + b*y + c, [a, b, c]);
_fit1: float(_fit1);

_first1: first(_fit1);
fit1: a*x + b*y + c, first(_first1), second(_first1), third(_first1);

load(draw);
multiplot_mode(wxt);

draw3d(
  	view = [61, 284],
	/*title = "RPM vs FuelLoad(%)",*/

	/* fit */
	enhanced3d = true,
	palette = gray,
  	explicit(fit1, x, min_x1, max_x1, y, min_y1, max_y1),

	enhanced3d = false,
	color = black,
  	point_size = 2,
  	point_type = 1,
  	points(x1, y1, z1)
);

multiplot_mode(none);

/*
 * vim:syntax=maxima
 */
