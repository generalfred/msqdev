
/*
 * This Maxima script is used to analyze the plot data
 * from a hill climbing session.
 * From the discrete data points a least squares fit will
 * be performed.
 * And from this the maximum of x and way correlating to
 * the peak is found.
 * Also, a plot is generated of most of this information
 * (other information is seen by examing the variables directly).
 *
 *   (%o1) batch("analyze-hill-climb.maxima");
 *
 *   maxima -b analyze-hill-climb.maxima
 */

/* echo -n "\"plotdata\";" | maxima -b analyze-hill-climb.maxima */

f1: "plotdata"$
/*f1: readonly("enter plotdata file");*/

/*
 * Configure the file with the plot data and
 * the titles to use.
 */
d1: read_matrix(f1, space)$
x_title: "advance"$
y_title: "rpm"$

y1: maplist(first, d1)$  /* rpm */
/*b1: maplist(second, d1)$*/  /* map */
x1: maplist(third, d1)$ /* advance */

load(lsquares)$


x1_max: apply(max, x1)$
x1_min: apply(min, x1)$

y1_max: apply(max, y1)$
y1_min: apply(min, y1)$

d2: transpose(addrow(matrix(), y1, x1))$

_fit: lsquares_estimates(d2, [y, x], y=a*x^2 + b*x + c, [a, b, c])$
_fit: float(_fit)$

fit: a*x^2 + b*x + c, first(first(_fit)), second(first(_fit)), third(first(_fit))$

/*
 * Find the maximum by taking the differential and
 * determining where the slope is zero.
 */
x_max: x, solve(diff(fit, x)=0, x)$
x_max: float(x_max)$
y_max: fit, x=x_max$

plot2d(
	[
		fit,
		[discrete, x1, y1]
		/*y_max*/
	],

	[x, x1_min, x1_max],

	/* [<points|lines>, <nsize>, <ncolor>, <ntype>] */
	[style,
		[lines, 1, 1],
		[points, 1, 2, 4],
		[lines, 1, 3]
	],
	/*
	[style, lines, points],
	[color, blue, red],
	[point_type, diamond, times],
	*/

	[xlabel, x_title],
	[ylabel, y_title]

	/*	[gnuplot_preamble, "set title 'rpm vs ve'"] */
);

/*readonly("enter a semicolon (;) to continue");*/

/*
 * vim:syntax=maxima
 */
